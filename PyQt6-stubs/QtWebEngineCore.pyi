# The PEP 484 type hints stub file for the QtWebEngineCore module.
#
# Generated by SIP 6.6.0
#
# Copyright (c) 2022 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6-WebEngine.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

# Support for QDate, QDateTime and QTime.
import datetime
import enum
import typing

import PyQt6.sip
from PyQt6 import QtCore, QtGui, QtNetwork, QtWebChannel

# Convenient type aliases.
PYQT_SIGNAL = typing.Union[QtCore.pyqtSignal, QtCore.pyqtBoundSignal]
PYQT_SLOT = typing.Union[typing.Callable[..., None], QtCore.pyqtBoundSignal]

class QWebEngineCertificateError(PyQt6.sip.simplewrapper):
    class Type(enum.Enum):
        SslPinnedKeyNotInCertificateChain = ...  # type: QWebEngineCertificateError.Type
        CertificateCommonNameInvalid = ...  # type: QWebEngineCertificateError.Type
        CertificateDateInvalid = ...  # type: QWebEngineCertificateError.Type
        CertificateAuthorityInvalid = ...  # type: QWebEngineCertificateError.Type
        CertificateContainsErrors = ...  # type: QWebEngineCertificateError.Type
        CertificateNoRevocationMechanism = ...  # type: QWebEngineCertificateError.Type
        CertificateUnableToCheckRevocation = ...  # type: QWebEngineCertificateError.Type
        CertificateRevoked = ...  # type: QWebEngineCertificateError.Type
        CertificateInvalid = ...  # type: QWebEngineCertificateError.Type
        CertificateWeakSignatureAlgorithm = ...  # type: QWebEngineCertificateError.Type
        CertificateNonUniqueName = ...  # type: QWebEngineCertificateError.Type
        CertificateWeakKey = ...  # type: QWebEngineCertificateError.Type
        CertificateNameConstraintViolation = ...  # type: QWebEngineCertificateError.Type
        CertificateValidityTooLong = ...  # type: QWebEngineCertificateError.Type
        CertificateTransparencyRequired = ...  # type: QWebEngineCertificateError.Type
        CertificateSymantecLegacy = ...  # type: QWebEngineCertificateError.Type
        CertificateKnownInterceptionBlocked = ...  # type: QWebEngineCertificateError.Type
        SslObsoleteVersion = ...  # type: QWebEngineCertificateError.Type
    def __init__(self, other: "QWebEngineCertificateError") -> None: ...
    def acceptCertificate(self) -> None: ...
    def description(self) -> str: ...
    def type(self) -> "QWebEngineCertificateError.Type": ...
    def certificateChain(self) -> typing.List[QtNetwork.QSslCertificate]: ...
    def rejectCertificate(self) -> None: ...
    def defer(self) -> None: ...
    def isOverridable(self) -> bool: ...
    def url(self) -> QtCore.QUrl: ...

class QWebEngineClientCertificateSelection(PyQt6.sip.simplewrapper):
    def __init__(self, a0: "QWebEngineClientCertificateSelection") -> None: ...
    def certificates(self) -> typing.List[QtNetwork.QSslCertificate]: ...
    def selectNone(self) -> None: ...
    def select(self, certificate: QtNetwork.QSslCertificate) -> None: ...
    def host(self) -> QtCore.QUrl: ...

class QWebEngineClientCertificateStore(PyQt6.sip.simplewrapper):
    def certificates(self) -> typing.List[QtNetwork.QSslCertificate]: ...
    def clear(self) -> None: ...
    def remove(self, certificate: QtNetwork.QSslCertificate) -> None: ...
    def add(self, certificate: QtNetwork.QSslCertificate, privateKey: QtNetwork.QSslKey) -> None: ...

class QWebEngineContextMenuRequest(QtCore.QObject):
    class EditFlag(enum.Flag):
        CanUndo = ...  # type: QWebEngineContextMenuRequest.EditFlag
        CanRedo = ...  # type: QWebEngineContextMenuRequest.EditFlag
        CanCut = ...  # type: QWebEngineContextMenuRequest.EditFlag
        CanCopy = ...  # type: QWebEngineContextMenuRequest.EditFlag
        CanPaste = ...  # type: QWebEngineContextMenuRequest.EditFlag
        CanDelete = ...  # type: QWebEngineContextMenuRequest.EditFlag
        CanSelectAll = ...  # type: QWebEngineContextMenuRequest.EditFlag
        CanTranslate = ...  # type: QWebEngineContextMenuRequest.EditFlag
        CanEditRichly = ...  # type: QWebEngineContextMenuRequest.EditFlag

    class MediaFlag(enum.Flag):
        MediaInError = ...  # type: QWebEngineContextMenuRequest.MediaFlag
        MediaPaused = ...  # type: QWebEngineContextMenuRequest.MediaFlag
        MediaMuted = ...  # type: QWebEngineContextMenuRequest.MediaFlag
        MediaLoop = ...  # type: QWebEngineContextMenuRequest.MediaFlag
        MediaCanSave = ...  # type: QWebEngineContextMenuRequest.MediaFlag
        MediaHasAudio = ...  # type: QWebEngineContextMenuRequest.MediaFlag
        MediaCanToggleControls = ...  # type: QWebEngineContextMenuRequest.MediaFlag
        MediaControls = ...  # type: QWebEngineContextMenuRequest.MediaFlag
        MediaCanPrint = ...  # type: QWebEngineContextMenuRequest.MediaFlag
        MediaCanRotate = ...  # type: QWebEngineContextMenuRequest.MediaFlag

    class MediaType(enum.Enum):
        MediaTypeNone = ...  # type: QWebEngineContextMenuRequest.MediaType
        MediaTypeImage = ...  # type: QWebEngineContextMenuRequest.MediaType
        MediaTypeVideo = ...  # type: QWebEngineContextMenuRequest.MediaType
        MediaTypeAudio = ...  # type: QWebEngineContextMenuRequest.MediaType
        MediaTypeCanvas = ...  # type: QWebEngineContextMenuRequest.MediaType
        MediaTypeFile = ...  # type: QWebEngineContextMenuRequest.MediaType
        MediaTypePlugin = ...  # type: QWebEngineContextMenuRequest.MediaType
    def editFlags(self) -> "QWebEngineContextMenuRequest.EditFlag": ...
    def mediaFlags(self) -> "QWebEngineContextMenuRequest.MediaFlag": ...
    def setAccepted(self, accepted: bool) -> None: ...
    def isAccepted(self) -> bool: ...
    def spellCheckerSuggestions(self) -> typing.List[str]: ...
    def misspelledWord(self) -> str: ...
    def isContentEditable(self) -> bool: ...
    def mediaType(self) -> "QWebEngineContextMenuRequest.MediaType": ...
    def mediaUrl(self) -> QtCore.QUrl: ...
    def linkUrl(self) -> QtCore.QUrl: ...
    def linkText(self) -> str: ...
    def selectedText(self) -> str: ...
    def position(self) -> QtCore.QPoint: ...

class QWebEngineCookieStore(QtCore.QObject):
    class FilterRequest(PyQt6.sip.simplewrapper):

        firstPartyUrl = ...  # type: QtCore.QUrl
        origin = ...  # type: QtCore.QUrl
        thirdParty = ...  # type: bool

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: "QWebEngineCookieStore.FilterRequest") -> None: ...

    def setCookieFilter(self, filterCallback: typing.Optional[typing.Callable[[FilterRequest], bool]] = ...) -> None: ...
    cookieRemoved: typing.ClassVar[QtCore.pyqtSignal]
    cookieAdded: typing.ClassVar[QtCore.pyqtSignal]
    def loadAllCookies(self) -> None: ...
    def deleteAllCookies(self) -> None: ...
    def deleteSessionCookies(self) -> None: ...
    def deleteCookie(self, cookie: QtNetwork.QNetworkCookie, origin: QtCore.QUrl = ...) -> None: ...
    def setCookie(self, cookie: QtNetwork.QNetworkCookie, origin: QtCore.QUrl = ...) -> None: ...

class QWebEngineDownloadRequest(QtCore.QObject):
    class DownloadInterruptReason(enum.Enum):
        NoReason = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        FileFailed = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        FileAccessDenied = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        FileNoSpace = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        FileNameTooLong = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        FileTooLarge = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        FileVirusInfected = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        FileTransientError = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        FileBlocked = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        FileSecurityCheckFailed = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        FileTooShort = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        FileHashMismatch = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        NetworkFailed = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        NetworkTimeout = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        NetworkDisconnected = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        NetworkServerDown = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        NetworkInvalidRequest = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        ServerFailed = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        ServerBadContent = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        ServerUnauthorized = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        ServerCertProblem = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        ServerForbidden = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        ServerUnreachable = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason
        UserCanceled = ...  # type: QWebEngineDownloadRequest.DownloadInterruptReason

    class SavePageFormat(enum.Enum):
        UnknownSaveFormat = ...  # type: QWebEngineDownloadRequest.SavePageFormat
        SingleHtmlSaveFormat = ...  # type: QWebEngineDownloadRequest.SavePageFormat
        CompleteHtmlSaveFormat = ...  # type: QWebEngineDownloadRequest.SavePageFormat
        MimeHtmlSaveFormat = ...  # type: QWebEngineDownloadRequest.SavePageFormat

    class DownloadState(enum.Enum):
        DownloadRequested = ...  # type: QWebEngineDownloadRequest.DownloadState
        DownloadInProgress = ...  # type: QWebEngineDownloadRequest.DownloadState
        DownloadCompleted = ...  # type: QWebEngineDownloadRequest.DownloadState
        DownloadCancelled = ...  # type: QWebEngineDownloadRequest.DownloadState
        DownloadInterrupted = ...  # type: QWebEngineDownloadRequest.DownloadState
    downloadFileNameChanged: typing.ClassVar[QtCore.pyqtSignal]
    downloadDirectoryChanged: typing.ClassVar[QtCore.pyqtSignal]
    isPausedChanged: typing.ClassVar[QtCore.pyqtSignal]
    isFinishedChanged: typing.ClassVar[QtCore.pyqtSignal]
    interruptReasonChanged: typing.ClassVar[QtCore.pyqtSignal]
    totalBytesChanged: typing.ClassVar[QtCore.pyqtSignal]
    receivedBytesChanged: typing.ClassVar[QtCore.pyqtSignal]
    savePageFormatChanged: typing.ClassVar[QtCore.pyqtSignal]
    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setDownloadFileName(self, fileName: str) -> None: ...
    def downloadFileName(self) -> str: ...
    def setDownloadDirectory(self, directory: str) -> None: ...
    def downloadDirectory(self) -> str: ...
    def suggestedFileName(self) -> str: ...
    def page(self) -> "QWebEnginePage": ...
    def isSavePageDownload(self) -> bool: ...
    def isPaused(self) -> bool: ...
    def interruptReasonString(self) -> str: ...
    def interruptReason(self) -> "QWebEngineDownloadRequest.DownloadInterruptReason": ...
    def setSavePageFormat(self, format: "QWebEngineDownloadRequest.SavePageFormat") -> None: ...
    def savePageFormat(self) -> "QWebEngineDownloadRequest.SavePageFormat": ...
    def mimeType(self) -> str: ...
    def resume(self) -> None: ...
    def pause(self) -> None: ...
    def cancel(self) -> None: ...
    def accept(self) -> None: ...
    def isFinished(self) -> bool: ...
    def url(self) -> QtCore.QUrl: ...
    def receivedBytes(self) -> int: ...
    def totalBytes(self) -> int: ...
    def state(self) -> "QWebEngineDownloadRequest.DownloadState": ...
    def id(self) -> int: ...

class QWebEngineFindTextResult(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: "QWebEngineFindTextResult") -> None: ...
    def activeMatch(self) -> int: ...
    def numberOfMatches(self) -> int: ...

class QWebEngineFullScreenRequest(PyQt6.sip.simplewrapper):
    def __init__(self, other: "QWebEngineFullScreenRequest") -> None: ...
    def origin(self) -> QtCore.QUrl: ...
    def toggleOn(self) -> bool: ...
    def accept(self) -> None: ...
    def reject(self) -> None: ...

class QWebEngineHistoryItem(PyQt6.sip.simplewrapper):
    def __init__(self, other: "QWebEngineHistoryItem") -> None: ...
    def swap(self, other: "QWebEngineHistoryItem") -> None: ...
    def isValid(self) -> bool: ...
    def iconUrl(self) -> QtCore.QUrl: ...
    def lastVisited(self) -> QtCore.QDateTime: ...
    def title(self) -> str: ...
    def url(self) -> QtCore.QUrl: ...
    def originalUrl(self) -> QtCore.QUrl: ...

class QWebEngineHistoryModel(QtCore.QAbstractListModel):
    class Roles(enum.Enum):
        UrlRole = ...  # type: QWebEngineHistoryModel.Roles
        TitleRole = ...  # type: QWebEngineHistoryModel.Roles
        OffsetRole = ...  # type: QWebEngineHistoryModel.Roles
        IconUrlRole = ...  # type: QWebEngineHistoryModel.Roles
    def reset(self) -> None: ...
    def roleNames(self) -> typing.Dict[int, QtCore.QByteArray]: ...
    def data(self, index: QtCore.QModelIndex, role: int = ...) -> typing.Any: ...
    def rowCount(self, parent: QtCore.QModelIndex = ...) -> int: ...

class QWebEngineHistory(QtCore.QObject):
    def forwardItemsModel(self) -> QWebEngineHistoryModel: ...
    def backItemsModel(self) -> QWebEngineHistoryModel: ...
    def itemsModel(self) -> QWebEngineHistoryModel: ...
    def __len__(self) -> int: ...
    def count(self) -> int: ...
    def currentItemIndex(self) -> int: ...
    def itemAt(self, i: int) -> QWebEngineHistoryItem: ...
    def forwardItem(self) -> QWebEngineHistoryItem: ...
    def currentItem(self) -> QWebEngineHistoryItem: ...
    def backItem(self) -> QWebEngineHistoryItem: ...
    def goToItem(self, item: QWebEngineHistoryItem) -> None: ...
    def forward(self) -> None: ...
    def back(self) -> None: ...
    def canGoForward(self) -> bool: ...
    def canGoBack(self) -> bool: ...
    def forwardItems(self, maxItems: int) -> typing.List[QWebEngineHistoryItem]: ...
    def backItems(self, maxItems: int) -> typing.List[QWebEngineHistoryItem]: ...
    def items(self) -> typing.List[QWebEngineHistoryItem]: ...
    def clear(self) -> None: ...

class QWebEngineHttpRequest(PyQt6.sip.simplewrapper):
    class Method(enum.Enum):
        Get = ...  # type: QWebEngineHttpRequest.Method
        Post = ...  # type: QWebEngineHttpRequest.Method
    @typing.overload
    def __init__(self, url: QtCore.QUrl = ..., method: "QWebEngineHttpRequest.Method" = ...) -> None: ...
    @typing.overload
    def __init__(self, other: "QWebEngineHttpRequest") -> None: ...
    def headers(self) -> typing.List[QtCore.QByteArray]: ...
    def unsetHeader(self, headerName: QtCore.QByteArray) -> None: ...
    def setHeader(self, headerName: QtCore.QByteArray, value: QtCore.QByteArray) -> None: ...
    def header(self, headerName: QtCore.QByteArray) -> QtCore.QByteArray: ...
    def hasHeader(self, headerName: QtCore.QByteArray) -> bool: ...
    def setPostData(self, postData: QtCore.QByteArray) -> None: ...
    def postData(self) -> QtCore.QByteArray: ...
    def setUrl(self, url: QtCore.QUrl) -> None: ...
    def url(self) -> QtCore.QUrl: ...
    def setMethod(self, method: "QWebEngineHttpRequest.Method") -> None: ...
    def method(self) -> "QWebEngineHttpRequest.Method": ...
    def __ne__(self, other: "QWebEngineHttpRequest") -> bool: ...  # type: ignore[override]
    def __eq__(self, other: "QWebEngineHttpRequest") -> bool: ...  # type: ignore[override]
    def swap(self, other: "QWebEngineHttpRequest") -> None: ...
    @staticmethod
    def postRequest(url: QtCore.QUrl, postData: typing.Dict[str, str]) -> "QWebEngineHttpRequest": ...

class QWebEngineLoadingInfo(PyQt6.sip.simplewrapper):
    class ErrorDomain(enum.Enum):
        NoErrorDomain = ...  # type: QWebEngineLoadingInfo.ErrorDomain
        InternalErrorDomain = ...  # type: QWebEngineLoadingInfo.ErrorDomain
        ConnectionErrorDomain = ...  # type: QWebEngineLoadingInfo.ErrorDomain
        CertificateErrorDomain = ...  # type: QWebEngineLoadingInfo.ErrorDomain
        HttpErrorDomain = ...  # type: QWebEngineLoadingInfo.ErrorDomain
        FtpErrorDomain = ...  # type: QWebEngineLoadingInfo.ErrorDomain
        DnsErrorDomain = ...  # type: QWebEngineLoadingInfo.ErrorDomain

    class LoadStatus(enum.Enum):
        LoadStartedStatus = ...  # type: QWebEngineLoadingInfo.LoadStatus
        LoadStoppedStatus = ...  # type: QWebEngineLoadingInfo.LoadStatus
        LoadSucceededStatus = ...  # type: QWebEngineLoadingInfo.LoadStatus
        LoadFailedStatus = ...  # type: QWebEngineLoadingInfo.LoadStatus
    def __init__(self, other: "QWebEngineLoadingInfo") -> None: ...
    def errorCode(self) -> int: ...
    def errorDomain(self) -> "QWebEngineLoadingInfo.ErrorDomain": ...
    def errorString(self) -> str: ...
    def status(self) -> "QWebEngineLoadingInfo.LoadStatus": ...
    def isErrorPage(self) -> bool: ...
    def url(self) -> QtCore.QUrl: ...

class QWebEngineNavigationRequest(QtCore.QObject):
    class NavigationType(enum.Enum):
        LinkClickedNavigation = ...  # type: QWebEngineNavigationRequest.NavigationType
        TypedNavigation = ...  # type: QWebEngineNavigationRequest.NavigationType
        FormSubmittedNavigation = ...  # type: QWebEngineNavigationRequest.NavigationType
        BackForwardNavigation = ...  # type: QWebEngineNavigationRequest.NavigationType
        ReloadNavigation = ...  # type: QWebEngineNavigationRequest.NavigationType
        OtherNavigation = ...  # type: QWebEngineNavigationRequest.NavigationType
        RedirectNavigation = ...  # type: QWebEngineNavigationRequest.NavigationType
    actionChanged: typing.ClassVar[QtCore.pyqtSignal]
    def reject(self) -> None: ...
    def accept(self) -> None: ...
    def navigationType(self) -> "QWebEngineNavigationRequest.NavigationType": ...
    def isMainFrame(self) -> bool: ...
    def url(self) -> QtCore.QUrl: ...

class QWebEngineNewWindowRequest(QtCore.QObject):
    class DestinationType(enum.Enum):
        InNewWindow = ...  # type: QWebEngineNewWindowRequest.DestinationType
        InNewTab = ...  # type: QWebEngineNewWindowRequest.DestinationType
        InNewDialog = ...  # type: QWebEngineNewWindowRequest.DestinationType
        InNewBackgroundTab = ...  # type: QWebEngineNewWindowRequest.DestinationType
    def openIn(self, a0: "QWebEnginePage") -> None: ...
    def isUserInitiated(self) -> bool: ...
    def requestedGeometry(self) -> QtCore.QRect: ...
    def requestedUrl(self) -> QtCore.QUrl: ...
    def destination(self) -> "QWebEngineNewWindowRequest.DestinationType": ...

class QWebEngineNotification(QtCore.QObject):

    closed: typing.ClassVar[QtCore.pyqtSignal]
    def close(self) -> None: ...
    def click(self) -> None: ...
    def show(self) -> None: ...
    def direction(self) -> QtCore.Qt.LayoutDirection: ...
    def language(self) -> str: ...
    def tag(self) -> str: ...
    def message(self) -> str: ...
    def title(self) -> str: ...
    def icon(self) -> QtGui.QImage: ...
    def origin(self) -> QtCore.QUrl: ...
    def matches(self, other: "QWebEngineNotification") -> bool: ...

class QWebEnginePage(QtCore.QObject):
    class LifecycleState(enum.Enum):
        Active = ...  # type: QWebEnginePage.LifecycleState
        Frozen = ...  # type: QWebEnginePage.LifecycleState
        Discarded = ...  # type: QWebEnginePage.LifecycleState

    class RenderProcessTerminationStatus(enum.Enum):
        NormalTerminationStatus = ...  # type: QWebEnginePage.RenderProcessTerminationStatus
        AbnormalTerminationStatus = ...  # type: QWebEnginePage.RenderProcessTerminationStatus
        CrashedTerminationStatus = ...  # type: QWebEnginePage.RenderProcessTerminationStatus
        KilledTerminationStatus = ...  # type: QWebEnginePage.RenderProcessTerminationStatus

    class NavigationType(enum.Enum):
        NavigationTypeLinkClicked = ...  # type: QWebEnginePage.NavigationType
        NavigationTypeTyped = ...  # type: QWebEnginePage.NavigationType
        NavigationTypeFormSubmitted = ...  # type: QWebEnginePage.NavigationType
        NavigationTypeBackForward = ...  # type: QWebEnginePage.NavigationType
        NavigationTypeReload = ...  # type: QWebEnginePage.NavigationType
        NavigationTypeRedirect = ...  # type: QWebEnginePage.NavigationType
        NavigationTypeOther = ...  # type: QWebEnginePage.NavigationType

    class JavaScriptConsoleMessageLevel(enum.Enum):
        InfoMessageLevel = ...  # type: QWebEnginePage.JavaScriptConsoleMessageLevel
        WarningMessageLevel = ...  # type: QWebEnginePage.JavaScriptConsoleMessageLevel
        ErrorMessageLevel = ...  # type: QWebEnginePage.JavaScriptConsoleMessageLevel

    class FileSelectionMode(enum.Enum):
        FileSelectOpen = ...  # type: QWebEnginePage.FileSelectionMode
        FileSelectOpenMultiple = ...  # type: QWebEnginePage.FileSelectionMode
        FileSelectUploadFolder = ...  # type: QWebEnginePage.FileSelectionMode
        FileSelectSave = ...  # type: QWebEnginePage.FileSelectionMode

    class Feature(enum.Enum):
        Notifications = ...  # type: QWebEnginePage.Feature
        Geolocation = ...  # type: QWebEnginePage.Feature
        MediaAudioCapture = ...  # type: QWebEnginePage.Feature
        MediaVideoCapture = ...  # type: QWebEnginePage.Feature
        MediaAudioVideoCapture = ...  # type: QWebEnginePage.Feature
        MouseLock = ...  # type: QWebEnginePage.Feature
        DesktopVideoCapture = ...  # type: QWebEnginePage.Feature
        DesktopAudioVideoCapture = ...  # type: QWebEnginePage.Feature

    class PermissionPolicy(enum.Enum):
        PermissionUnknown = ...  # type: QWebEnginePage.PermissionPolicy
        PermissionGrantedByUser = ...  # type: QWebEnginePage.PermissionPolicy
        PermissionDeniedByUser = ...  # type: QWebEnginePage.PermissionPolicy

    class WebWindowType(enum.Enum):
        WebBrowserWindow = ...  # type: QWebEnginePage.WebWindowType
        WebBrowserTab = ...  # type: QWebEnginePage.WebWindowType
        WebDialog = ...  # type: QWebEnginePage.WebWindowType
        WebBrowserBackgroundTab = ...  # type: QWebEnginePage.WebWindowType

    class FindFlag(enum.Flag):
        FindBackward = ...  # type: QWebEnginePage.FindFlag
        FindCaseSensitively = ...  # type: QWebEnginePage.FindFlag

    class WebAction(enum.Enum):
        NoWebAction = ...  # type: QWebEnginePage.WebAction
        Back = ...  # type: QWebEnginePage.WebAction
        Forward = ...  # type: QWebEnginePage.WebAction
        Stop = ...  # type: QWebEnginePage.WebAction
        Reload = ...  # type: QWebEnginePage.WebAction
        Cut = ...  # type: QWebEnginePage.WebAction
        Copy = ...  # type: QWebEnginePage.WebAction
        Paste = ...  # type: QWebEnginePage.WebAction
        Undo = ...  # type: QWebEnginePage.WebAction
        Redo = ...  # type: QWebEnginePage.WebAction
        SelectAll = ...  # type: QWebEnginePage.WebAction
        ReloadAndBypassCache = ...  # type: QWebEnginePage.WebAction
        PasteAndMatchStyle = ...  # type: QWebEnginePage.WebAction
        OpenLinkInThisWindow = ...  # type: QWebEnginePage.WebAction
        OpenLinkInNewWindow = ...  # type: QWebEnginePage.WebAction
        OpenLinkInNewTab = ...  # type: QWebEnginePage.WebAction
        CopyLinkToClipboard = ...  # type: QWebEnginePage.WebAction
        DownloadLinkToDisk = ...  # type: QWebEnginePage.WebAction
        CopyImageToClipboard = ...  # type: QWebEnginePage.WebAction
        CopyImageUrlToClipboard = ...  # type: QWebEnginePage.WebAction
        DownloadImageToDisk = ...  # type: QWebEnginePage.WebAction
        CopyMediaUrlToClipboard = ...  # type: QWebEnginePage.WebAction
        ToggleMediaControls = ...  # type: QWebEnginePage.WebAction
        ToggleMediaLoop = ...  # type: QWebEnginePage.WebAction
        ToggleMediaPlayPause = ...  # type: QWebEnginePage.WebAction
        ToggleMediaMute = ...  # type: QWebEnginePage.WebAction
        DownloadMediaToDisk = ...  # type: QWebEnginePage.WebAction
        InspectElement = ...  # type: QWebEnginePage.WebAction
        ExitFullScreen = ...  # type: QWebEnginePage.WebAction
        RequestClose = ...  # type: QWebEnginePage.WebAction
        Unselect = ...  # type: QWebEnginePage.WebAction
        SavePage = ...  # type: QWebEnginePage.WebAction
        OpenLinkInNewBackgroundTab = ...  # type: QWebEnginePage.WebAction
        ViewSource = ...  # type: QWebEnginePage.WebAction
        ToggleBold = ...  # type: QWebEnginePage.WebAction
        ToggleItalic = ...  # type: QWebEnginePage.WebAction
        ToggleUnderline = ...  # type: QWebEnginePage.WebAction
        ToggleStrikethrough = ...  # type: QWebEnginePage.WebAction
        AlignLeft = ...  # type: QWebEnginePage.WebAction
        AlignCenter = ...  # type: QWebEnginePage.WebAction
        AlignRight = ...  # type: QWebEnginePage.WebAction
        AlignJustified = ...  # type: QWebEnginePage.WebAction
        Indent = ...  # type: QWebEnginePage.WebAction
        Outdent = ...  # type: QWebEnginePage.WebAction
        InsertOrderedList = ...  # type: QWebEnginePage.WebAction
        InsertUnorderedList = ...  # type: QWebEnginePage.WebAction
    @typing.overload
    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...
    @typing.overload
    def __init__(self, profile: "QWebEngineProfile", parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    newWindowRequested: typing.ClassVar[QtCore.pyqtSignal]
    navigationRequested: typing.ClassVar[QtCore.pyqtSignal]
    certificateError: typing.ClassVar[QtCore.pyqtSignal]
    loadingChanged: typing.ClassVar[QtCore.pyqtSignal]
    @typing.overload
    def printToPdf(self, filePath: str, pageLayout: QtGui.QPageLayout = ..., ranges: QtGui.QPageRanges = ...) -> None: ...
    @typing.overload
    def printToPdf(self, resultCallback: typing.Callable[[QtCore.QByteArray], None], pageLayout: QtGui.QPageLayout = ..., ranges: QtGui.QPageRanges = ...) -> None: ...
    def setWebChannel(self, a0: QtWebChannel.QWebChannel, worldId: int = ...) -> None: ...
    @typing.overload
    def runJavaScript(self, scriptSource: str, worldId: int = ..., resultCallback: typing.Optional[typing.Callable[[str], None]] = ...) -> None: ...
    @typing.overload
    def runJavaScript(self, scriptSource: str, resultCallback: typing.Callable[[typing.Any], None]) -> None: ...
    def toPlainText(self, resultCallback: typing.Callable[[str], None]) -> None: ...
    def toHtml(self, resultCallback: typing.Callable[[str], None]) -> None: ...
    def isLoading(self) -> bool: ...
    def findText(self, subString: str, options: "QWebEnginePage.FindFlag" = ..., resultCallback: typing.Optional[typing.Callable[[bool], None]] = ...) -> None: ...
    renderProcessPidChanged: typing.ClassVar[QtCore.pyqtSignal]
    def renderProcessPid(self) -> int: ...
    findTextFinished: typing.ClassVar[QtCore.pyqtSignal]
    recommendedStateChanged: typing.ClassVar[QtCore.pyqtSignal]
    lifecycleStateChanged: typing.ClassVar[QtCore.pyqtSignal]
    visibleChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setVisible(self, visible: bool) -> None: ...
    def isVisible(self) -> bool: ...
    def recommendedState(self) -> "QWebEnginePage.LifecycleState": ...
    def setLifecycleState(self, state: "QWebEnginePage.LifecycleState") -> None: ...
    def lifecycleState(self) -> "QWebEnginePage.LifecycleState": ...
    def setUrlRequestInterceptor(self, interceptor: "QWebEngineUrlRequestInterceptor") -> None: ...
    printRequested: typing.ClassVar[QtCore.pyqtSignal]
    selectClientCertificate: typing.ClassVar[QtCore.pyqtSignal]
    registerProtocolHandlerRequested: typing.ClassVar[QtCore.pyqtSignal]
    quotaRequested: typing.ClassVar[QtCore.pyqtSignal]
    def devToolsPage(self) -> "QWebEnginePage": ...
    def setDevToolsPage(self, page: "QWebEnginePage") -> None: ...
    def inspectedPage(self) -> "QWebEnginePage": ...
    def setInspectedPage(self, page: "QWebEnginePage") -> None: ...
    def download(self, url: QtCore.QUrl, filename: str = ...) -> None: ...
    def save(self, filePath: str, format: QWebEngineDownloadRequest.SavePageFormat = ...) -> None: ...
    def replaceMisspelledWord(self, replacement: str) -> None: ...
    pdfPrintingFinished: typing.ClassVar[QtCore.pyqtSignal]
    recentlyAudibleChanged: typing.ClassVar[QtCore.pyqtSignal]
    audioMutedChanged: typing.ClassVar[QtCore.pyqtSignal]
    contentsSizeChanged: typing.ClassVar[QtCore.pyqtSignal]
    scrollPositionChanged: typing.ClassVar[QtCore.pyqtSignal]
    iconChanged: typing.ClassVar[QtCore.pyqtSignal]
    def recentlyAudible(self) -> bool: ...
    def setAudioMuted(self, muted: bool) -> None: ...
    def isAudioMuted(self) -> bool: ...
    def contentsSize(self) -> QtCore.QSizeF: ...
    def scrollPosition(self) -> QtCore.QPointF: ...
    def icon(self) -> QtGui.QIcon: ...
    renderProcessTerminated: typing.ClassVar[QtCore.pyqtSignal]
    fullScreenRequested: typing.ClassVar[QtCore.pyqtSignal]
    def setBackgroundColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor, int]) -> None: ...
    def backgroundColor(self) -> QtGui.QColor: ...
    def acceptNavigationRequest(self, url: QtCore.QUrl, type: "QWebEnginePage.NavigationType", isMainFrame: bool) -> bool: ...
    def webChannel(self) -> QtWebChannel.QWebChannel: ...
    def scripts(self) -> "QWebEngineScriptCollection": ...
    def profile(self) -> "QWebEngineProfile": ...
    def javaScriptConsoleMessage(self, level: "QWebEnginePage.JavaScriptConsoleMessageLevel", message: str, lineNumber: int, sourceID: str) -> None: ...
    def javaScriptPrompt(self, securityOrigin: QtCore.QUrl, msg: str, defaultValue: str) -> typing.Tuple[bool, str]: ...
    def javaScriptConfirm(self, securityOrigin: QtCore.QUrl, msg: str) -> bool: ...
    def javaScriptAlert(self, securityOrigin: QtCore.QUrl, msg: str) -> None: ...
    def chooseFiles(self, mode: "QWebEnginePage.FileSelectionMode", oldFiles: typing.Iterable[str], acceptedMimeTypes: typing.Iterable[str]) -> typing.List[str]: ...
    def createWindow(self, type: "QWebEnginePage.WebWindowType") -> "QWebEnginePage": ...
    iconUrlChanged: typing.ClassVar[QtCore.pyqtSignal]
    urlChanged: typing.ClassVar[QtCore.pyqtSignal]
    titleChanged: typing.ClassVar[QtCore.pyqtSignal]
    proxyAuthenticationRequired: typing.ClassVar[QtCore.pyqtSignal]
    authenticationRequired: typing.ClassVar[QtCore.pyqtSignal]
    featurePermissionRequestCanceled: typing.ClassVar[QtCore.pyqtSignal]
    featurePermissionRequested: typing.ClassVar[QtCore.pyqtSignal]
    windowCloseRequested: typing.ClassVar[QtCore.pyqtSignal]
    geometryChangeRequested: typing.ClassVar[QtCore.pyqtSignal]
    selectionChanged: typing.ClassVar[QtCore.pyqtSignal]
    linkHovered: typing.ClassVar[QtCore.pyqtSignal]
    loadFinished: typing.ClassVar[QtCore.pyqtSignal]
    loadProgress: typing.ClassVar[QtCore.pyqtSignal]
    loadStarted: typing.ClassVar[QtCore.pyqtSignal]
    def settings(self) -> "QWebEngineSettings": ...
    def setZoomFactor(self, factor: float) -> None: ...
    def zoomFactor(self) -> float: ...
    def iconUrl(self) -> QtCore.QUrl: ...
    def requestedUrl(self) -> QtCore.QUrl: ...
    def url(self) -> QtCore.QUrl: ...
    def setUrl(self, url: QtCore.QUrl) -> None: ...
    def title(self) -> str: ...
    def setContent(self, data: QtCore.QByteArray, mimeType: str = ..., baseUrl: QtCore.QUrl = ...) -> None: ...
    def setHtml(self, html: str, baseUrl: QtCore.QUrl = ...) -> None: ...
    @typing.overload
    def load(self, url: QtCore.QUrl) -> None: ...
    @typing.overload
    def load(self, request: QWebEngineHttpRequest) -> None: ...
    def setFeaturePermission(self, securityOrigin: QtCore.QUrl, feature: "QWebEnginePage.Feature", policy: "QWebEnginePage.PermissionPolicy") -> None: ...
    def event(self, a0: QtCore.QEvent) -> bool: ...
    def triggerAction(self, action: "QWebEnginePage.WebAction", checked: bool = ...) -> None: ...
    def action(self, action: "QWebEnginePage.WebAction") -> QtGui.QAction: ...
    def selectedText(self) -> str: ...
    def hasSelection(self) -> bool: ...
    def history(self) -> QWebEngineHistory: ...

class QWebEngineProfile(QtCore.QObject):
    class PersistentCookiesPolicy(enum.Enum):
        NoPersistentCookies = ...  # type: QWebEngineProfile.PersistentCookiesPolicy
        AllowPersistentCookies = ...  # type: QWebEngineProfile.PersistentCookiesPolicy
        ForcePersistentCookies = ...  # type: QWebEngineProfile.PersistentCookiesPolicy

    class HttpCacheType(enum.Enum):
        MemoryHttpCache = ...  # type: QWebEngineProfile.HttpCacheType
        DiskHttpCache = ...  # type: QWebEngineProfile.HttpCacheType
        NoCache = ...  # type: QWebEngineProfile.HttpCacheType
    @typing.overload
    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...
    @typing.overload
    def __init__(self, name: str, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...
    def requestIconForIconURL(self, url: QtCore.QUrl, desiredSizeInPixel: int, iconAvailableCallback: typing.Callable[[QtGui.QIcon, QtCore.QUrl], None]) -> None: ...
    def requestIconForPageURL(self, url: QtCore.QUrl, desiredSizeInPixel: int, iconAvailableCallback: typing.Callable[[QtGui.QIcon, QtCore.QUrl, QtCore.QUrl], None]) -> None: ...
    def clientCertificateStore(self) -> QWebEngineClientCertificateStore: ...
    def setNotificationPresenter(self, a0: typing.Callable[[QWebEngineNotification], None]) -> None: ...
    def setDownloadPath(self, path: str) -> None: ...
    def downloadPath(self) -> str: ...
    def isSpellCheckEnabled(self) -> bool: ...
    def setSpellCheckEnabled(self, enabled: bool) -> None: ...
    def spellCheckLanguages(self) -> typing.List[str]: ...
    def setSpellCheckLanguages(self, languages: typing.Iterable[str]) -> None: ...
    def clearHttpCache(self) -> None: ...
    def removeAllUrlSchemeHandlers(self) -> None: ...
    def removeUrlSchemeHandler(self, a0: "QWebEngineUrlSchemeHandler") -> None: ...
    def removeUrlScheme(self, scheme: QtCore.QByteArray) -> None: ...
    def installUrlSchemeHandler(self, scheme: QtCore.QByteArray, a1: "QWebEngineUrlSchemeHandler") -> None: ...
    def urlSchemeHandler(self, a0: QtCore.QByteArray) -> "QWebEngineUrlSchemeHandler": ...
    def setUrlRequestInterceptor(self, interceptor: "QWebEngineUrlRequestInterceptor") -> None: ...
    def cookieStore(self) -> QWebEngineCookieStore: ...
    def httpAcceptLanguage(self) -> str: ...
    def setHttpAcceptLanguage(self, httpAcceptLanguage: str) -> None: ...
    downloadRequested: typing.ClassVar[QtCore.pyqtSignal]
    @staticmethod
    def defaultProfile() -> "QWebEngineProfile": ...
    def scripts(self) -> "QWebEngineScriptCollection": ...
    def settings(self) -> "QWebEngineSettings": ...
    def visitedLinksContainsUrl(self, url: QtCore.QUrl) -> bool: ...
    def clearVisitedLinks(self, urls: typing.Iterable[QtCore.QUrl]) -> None: ...
    def clearAllVisitedLinks(self) -> None: ...
    def setHttpCacheMaximumSize(self, maxSize: int) -> None: ...
    def httpCacheMaximumSize(self) -> int: ...
    def setPersistentCookiesPolicy(self, a0: "QWebEngineProfile.PersistentCookiesPolicy") -> None: ...
    def persistentCookiesPolicy(self) -> "QWebEngineProfile.PersistentCookiesPolicy": ...
    def setHttpCacheType(self, a0: "QWebEngineProfile.HttpCacheType") -> None: ...
    def httpCacheType(self) -> "QWebEngineProfile.HttpCacheType": ...
    def setHttpUserAgent(self, userAgent: str) -> None: ...
    def httpUserAgent(self) -> str: ...
    def setCachePath(self, path: str) -> None: ...
    def cachePath(self) -> str: ...
    def setPersistentStoragePath(self, path: str) -> None: ...
    def persistentStoragePath(self) -> str: ...
    def isOffTheRecord(self) -> bool: ...
    def storageName(self) -> str: ...

class QWebEngineQuotaRequest(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: "QWebEngineQuotaRequest") -> None: ...
    def __ne__(self, that: "QWebEngineQuotaRequest") -> bool: ...  # type: ignore[override]
    def __eq__(self, that: "QWebEngineQuotaRequest") -> bool: ...  # type: ignore[override]
    def requestedSize(self) -> int: ...
    def origin(self) -> QtCore.QUrl: ...
    def reject(self) -> None: ...
    def accept(self) -> None: ...

class QWebEngineRegisterProtocolHandlerRequest(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: "QWebEngineRegisterProtocolHandlerRequest") -> None: ...
    def __ne__(self, that: "QWebEngineRegisterProtocolHandlerRequest") -> bool: ...  # type: ignore[override]
    def __eq__(self, that: "QWebEngineRegisterProtocolHandlerRequest") -> bool: ...  # type: ignore[override]
    def scheme(self) -> str: ...
    def origin(self) -> QtCore.QUrl: ...
    def reject(self) -> None: ...
    def accept(self) -> None: ...

class QWebEngineScript(PyQt6.sip.simplewrapper):
    class ScriptWorldId(enum.IntEnum):
        MainWorld = ...  # type: QWebEngineScript.ScriptWorldId
        ApplicationWorld = ...  # type: QWebEngineScript.ScriptWorldId
        UserWorld = ...  # type: QWebEngineScript.ScriptWorldId

    class InjectionPoint(enum.Enum):
        Deferred = ...  # type: QWebEngineScript.InjectionPoint
        DocumentReady = ...  # type: QWebEngineScript.InjectionPoint
        DocumentCreation = ...  # type: QWebEngineScript.InjectionPoint
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: "QWebEngineScript") -> None: ...
    def setSourceUrl(self, url: QtCore.QUrl) -> None: ...
    def sourceUrl(self) -> QtCore.QUrl: ...
    def swap(self, other: "QWebEngineScript") -> None: ...
    def __ne__(self, other: "QWebEngineScript") -> bool: ...  # type: ignore[override]
    def __eq__(self, other: "QWebEngineScript") -> bool: ...  # type: ignore[override]
    def setRunsOnSubFrames(self, on: bool) -> None: ...
    def runsOnSubFrames(self) -> bool: ...
    def setWorldId(self, a0: int) -> None: ...
    def worldId(self) -> int: ...
    def setInjectionPoint(self, a0: "QWebEngineScript.InjectionPoint") -> None: ...
    def injectionPoint(self) -> "QWebEngineScript.InjectionPoint": ...
    def setSourceCode(self, a0: str) -> None: ...
    def sourceCode(self) -> str: ...
    def setName(self, a0: str) -> None: ...
    def name(self) -> str: ...

class QWebEngineScriptCollection(PyQt6.sip.simplewrapper):
    def find(self, name: str) -> typing.List[QWebEngineScript]: ...
    def toList(self) -> typing.List[QWebEngineScript]: ...
    def clear(self) -> None: ...
    def remove(self, a0: QWebEngineScript) -> bool: ...
    @typing.overload
    def insert(self, a0: QWebEngineScript) -> None: ...
    @typing.overload
    def insert(self, list: typing.Iterable[QWebEngineScript]) -> None: ...
    def contains(self, value: QWebEngineScript) -> bool: ...
    def __len__(self) -> int: ...
    def count(self) -> int: ...
    def isEmpty(self) -> bool: ...

class QWebEngineSettings(PyQt6.sip.simplewrapper):
    class UnknownUrlSchemePolicy(enum.Enum):
        DisallowUnknownUrlSchemes = ...  # type: QWebEngineSettings.UnknownUrlSchemePolicy
        AllowUnknownUrlSchemesFromUserInteraction = ...  # type: QWebEngineSettings.UnknownUrlSchemePolicy
        AllowAllUnknownUrlSchemes = ...  # type: QWebEngineSettings.UnknownUrlSchemePolicy

    class FontSize(enum.Enum):
        MinimumFontSize = ...  # type: QWebEngineSettings.FontSize
        MinimumLogicalFontSize = ...  # type: QWebEngineSettings.FontSize
        DefaultFontSize = ...  # type: QWebEngineSettings.FontSize
        DefaultFixedFontSize = ...  # type: QWebEngineSettings.FontSize

    class WebAttribute(enum.Enum):
        AutoLoadImages = ...  # type: QWebEngineSettings.WebAttribute
        JavascriptEnabled = ...  # type: QWebEngineSettings.WebAttribute
        JavascriptCanOpenWindows = ...  # type: QWebEngineSettings.WebAttribute
        JavascriptCanAccessClipboard = ...  # type: QWebEngineSettings.WebAttribute
        LinksIncludedInFocusChain = ...  # type: QWebEngineSettings.WebAttribute
        LocalStorageEnabled = ...  # type: QWebEngineSettings.WebAttribute
        LocalContentCanAccessRemoteUrls = ...  # type: QWebEngineSettings.WebAttribute
        XSSAuditingEnabled = ...  # type: QWebEngineSettings.WebAttribute
        SpatialNavigationEnabled = ...  # type: QWebEngineSettings.WebAttribute
        LocalContentCanAccessFileUrls = ...  # type: QWebEngineSettings.WebAttribute
        HyperlinkAuditingEnabled = ...  # type: QWebEngineSettings.WebAttribute
        ScrollAnimatorEnabled = ...  # type: QWebEngineSettings.WebAttribute
        ErrorPageEnabled = ...  # type: QWebEngineSettings.WebAttribute
        PluginsEnabled = ...  # type: QWebEngineSettings.WebAttribute
        FullScreenSupportEnabled = ...  # type: QWebEngineSettings.WebAttribute
        ScreenCaptureEnabled = ...  # type: QWebEngineSettings.WebAttribute
        WebGLEnabled = ...  # type: QWebEngineSettings.WebAttribute
        Accelerated2dCanvasEnabled = ...  # type: QWebEngineSettings.WebAttribute
        AutoLoadIconsForPage = ...  # type: QWebEngineSettings.WebAttribute
        TouchIconsEnabled = ...  # type: QWebEngineSettings.WebAttribute
        FocusOnNavigationEnabled = ...  # type: QWebEngineSettings.WebAttribute
        PrintElementBackgrounds = ...  # type: QWebEngineSettings.WebAttribute
        AllowRunningInsecureContent = ...  # type: QWebEngineSettings.WebAttribute
        AllowGeolocationOnInsecureOrigins = ...  # type: QWebEngineSettings.WebAttribute
        AllowWindowActivationFromJavaScript = ...  # type: QWebEngineSettings.WebAttribute
        ShowScrollBars = ...  # type: QWebEngineSettings.WebAttribute
        PlaybackRequiresUserGesture = ...  # type: QWebEngineSettings.WebAttribute
        WebRTCPublicInterfacesOnly = ...  # type: QWebEngineSettings.WebAttribute
        JavascriptCanPaste = ...  # type: QWebEngineSettings.WebAttribute
        DnsPrefetchEnabled = ...  # type: QWebEngineSettings.WebAttribute
        PdfViewerEnabled = ...  # type: QWebEngineSettings.WebAttribute

    class FontFamily(enum.Enum):
        StandardFont = ...  # type: QWebEngineSettings.FontFamily
        FixedFont = ...  # type: QWebEngineSettings.FontFamily
        SerifFont = ...  # type: QWebEngineSettings.FontFamily
        SansSerifFont = ...  # type: QWebEngineSettings.FontFamily
        CursiveFont = ...  # type: QWebEngineSettings.FontFamily
        FantasyFont = ...  # type: QWebEngineSettings.FontFamily
        PictographFont = ...  # type: QWebEngineSettings.FontFamily
    def resetUnknownUrlSchemePolicy(self) -> None: ...
    def setUnknownUrlSchemePolicy(self, policy: "QWebEngineSettings.UnknownUrlSchemePolicy") -> None: ...
    def unknownUrlSchemePolicy(self) -> "QWebEngineSettings.UnknownUrlSchemePolicy": ...
    def defaultTextEncoding(self) -> str: ...
    def setDefaultTextEncoding(self, encoding: str) -> None: ...
    def resetAttribute(self, attr: "QWebEngineSettings.WebAttribute") -> None: ...
    def testAttribute(self, attr: "QWebEngineSettings.WebAttribute") -> bool: ...
    def setAttribute(self, attr: "QWebEngineSettings.WebAttribute", on: bool) -> None: ...
    def resetFontSize(self, type: "QWebEngineSettings.FontSize") -> None: ...
    def fontSize(self, type: "QWebEngineSettings.FontSize") -> int: ...
    def setFontSize(self, type: "QWebEngineSettings.FontSize", size: int) -> None: ...
    def resetFontFamily(self, which: "QWebEngineSettings.FontFamily") -> None: ...
    def fontFamily(self, which: "QWebEngineSettings.FontFamily") -> str: ...
    def setFontFamily(self, which: "QWebEngineSettings.FontFamily", family: str) -> None: ...

class QWebEngineUrlRequestInfo(PyQt6.sip.simplewrapper):
    class NavigationType(enum.Enum):
        NavigationTypeLink = ...  # type: QWebEngineUrlRequestInfo.NavigationType
        NavigationTypeTyped = ...  # type: QWebEngineUrlRequestInfo.NavigationType
        NavigationTypeFormSubmitted = ...  # type: QWebEngineUrlRequestInfo.NavigationType
        NavigationTypeBackForward = ...  # type: QWebEngineUrlRequestInfo.NavigationType
        NavigationTypeReload = ...  # type: QWebEngineUrlRequestInfo.NavigationType
        NavigationTypeRedirect = ...  # type: QWebEngineUrlRequestInfo.NavigationType
        NavigationTypeOther = ...  # type: QWebEngineUrlRequestInfo.NavigationType

    class ResourceType(enum.Enum):
        ResourceTypeMainFrame = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeSubFrame = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeStylesheet = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeScript = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeImage = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeFontResource = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeSubResource = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeObject = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeMedia = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeWorker = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeSharedWorker = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypePrefetch = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeFavicon = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeXhr = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypePing = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeServiceWorker = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeUnknown = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeCspReport = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypePluginResource = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeNavigationPreloadMainFrame = ...  # type: QWebEngineUrlRequestInfo.ResourceType
        ResourceTypeNavigationPreloadSubFrame = ...  # type: QWebEngineUrlRequestInfo.ResourceType
    def initiator(self) -> QtCore.QUrl: ...
    def setHttpHeader(self, name: QtCore.QByteArray, value: QtCore.QByteArray) -> None: ...
    def redirect(self, url: QtCore.QUrl) -> None: ...
    def block(self, shouldBlock: bool) -> None: ...
    def requestMethod(self) -> QtCore.QByteArray: ...
    def firstPartyUrl(self) -> QtCore.QUrl: ...
    def requestUrl(self) -> QtCore.QUrl: ...
    def navigationType(self) -> "QWebEngineUrlRequestInfo.NavigationType": ...
    def resourceType(self) -> "QWebEngineUrlRequestInfo.ResourceType": ...

class QWebEngineUrlRequestInterceptor(QtCore.QObject):
    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...
    def interceptRequest(self, info: QWebEngineUrlRequestInfo) -> None: ...

class QWebEngineUrlRequestJob(QtCore.QObject):
    class Error(enum.Enum):
        NoError = ...  # type: QWebEngineUrlRequestJob.Error
        UrlNotFound = ...  # type: QWebEngineUrlRequestJob.Error
        UrlInvalid = ...  # type: QWebEngineUrlRequestJob.Error
        RequestAborted = ...  # type: QWebEngineUrlRequestJob.Error
        RequestDenied = ...  # type: QWebEngineUrlRequestJob.Error
        RequestFailed = ...  # type: QWebEngineUrlRequestJob.Error
    def requestHeaders(self) -> typing.Dict[QtCore.QByteArray, QtCore.QByteArray]: ...
    def initiator(self) -> QtCore.QUrl: ...
    def redirect(self, url: QtCore.QUrl) -> None: ...
    def fail(self, error: "QWebEngineUrlRequestJob.Error") -> None: ...
    def reply(self, contentType: QtCore.QByteArray, device: QtCore.QIODevice) -> None: ...
    def requestMethod(self) -> QtCore.QByteArray: ...
    def requestUrl(self) -> QtCore.QUrl: ...

class QWebEngineUrlScheme(PyQt6.sip.simplewrapper):
    class Flag(enum.Flag):
        SecureScheme = ...  # type: QWebEngineUrlScheme.Flag
        LocalScheme = ...  # type: QWebEngineUrlScheme.Flag
        LocalAccessAllowed = ...  # type: QWebEngineUrlScheme.Flag
        NoAccessAllowed = ...  # type: QWebEngineUrlScheme.Flag
        ServiceWorkersAllowed = ...  # type: QWebEngineUrlScheme.Flag
        ViewSourceAllowed = ...  # type: QWebEngineUrlScheme.Flag
        ContentSecurityPolicyIgnored = ...  # type: QWebEngineUrlScheme.Flag
        CorsEnabled = ...  # type: QWebEngineUrlScheme.Flag

    class SpecialPort(enum.Enum):
        PortUnspecified = ...  # type: QWebEngineUrlScheme.SpecialPort

    class Syntax(enum.Enum):
        HostPortAndUserInformation = ...  # type: QWebEngineUrlScheme.Syntax
        HostAndPort = ...  # type: QWebEngineUrlScheme.Syntax
        Host = ...  # type: QWebEngineUrlScheme.Syntax
        Path = ...  # type: QWebEngineUrlScheme.Syntax
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, name: QtCore.QByteArray) -> None: ...
    @typing.overload
    def __init__(self, that: "QWebEngineUrlScheme") -> None: ...
    @staticmethod
    def schemeByName(name: QtCore.QByteArray) -> "QWebEngineUrlScheme": ...
    @staticmethod
    def registerScheme(scheme: "QWebEngineUrlScheme") -> None: ...
    def setFlags(self, newValue: "QWebEngineUrlScheme.Flag") -> None: ...
    def flags(self) -> "QWebEngineUrlScheme.Flag": ...
    def setDefaultPort(self, newValue: int) -> None: ...
    def defaultPort(self) -> int: ...
    def setSyntax(self, newValue: "QWebEngineUrlScheme.Syntax") -> None: ...
    def syntax(self) -> "QWebEngineUrlScheme.Syntax": ...
    def setName(self, newValue: QtCore.QByteArray) -> None: ...
    def name(self) -> QtCore.QByteArray: ...
    def __ne__(self, that: "QWebEngineUrlScheme") -> bool: ...  # type: ignore[override]
    def __eq__(self, that: "QWebEngineUrlScheme") -> bool: ...  # type: ignore[override]

class QWebEngineUrlSchemeHandler(QtCore.QObject):
    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...
    def requestStarted(self, a0: QWebEngineUrlRequestJob) -> None: ...

PYQT_WEBENGINE_VERSION = ...  # type: int
PYQT_WEBENGINE_VERSION_STR = ...  # type: str
